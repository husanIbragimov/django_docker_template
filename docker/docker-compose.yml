version: '3.9'

services:

  nginx:
    image: nginx:1.27
    container_name: nginx
    networks:
      - shared_network
    ports:
      - "8001:8000"
    volumes:
      - ./.conf/docker-nginx.conf:/etc/nginx/nginx.conf
      - ./static:/app/static
      - ./media:/app/media

    depends_on:
      - web


  web:
    build: ..
    container_name: web
    networks:
      - shared_network
    command: >
      /bin/sh -c "while ! nc -z redis 6379; do sleep 1; done;
                  while ! nc -z postgres 5432; do sleep 1; done;
                  python manage.py collectstatic --noinput &&
                  python manage.py migrate &&
                  gunicorn --workers ${WORKERS_COUNT:-4} --bind 0.0.0.0:8000 config.wsgi:application"
    volumes:
      - ./src:/app/src
      - ./static:/app/static
      - ./media:/app/media
      - ./logs:/app/logs
      - ./assets:/app/assets
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    environment:
      - CELERY_BROKER=redis://redis:6379/0

  
  postgres:
    image: postgres:17.0
    container_name: db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./.volumes/pgdata:/var/lib/postgresql/data
    ports:
      - "5439:5432"

    networks:
      - shared_network

  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - shared_network
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - ./.volumes/redis_data:/data

  celery:
    build: ..
    container_name: celery
    networks:
      - shared_network
    command: celery -A config worker --loglevel=INFO --concurrency=${CELERY_WORKERS}
    volumes:
      - ./src:/app/src
      - ./media:/app/media
      - ./logs:/app/logs
    depends_on:
      - redis
      - web
    env_file:
      - .env

networks:
  shared_network:
    driver: bridge
